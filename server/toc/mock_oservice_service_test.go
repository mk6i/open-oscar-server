// Code generated by mockery v2.53.3. DO NOT EDIT.

package toc

import (
	context "context"

	config "github.com/mk6i/retro-aim-server/config"

	mock "github.com/stretchr/testify/mock"

	state "github.com/mk6i/retro-aim-server/state"

	wire "github.com/mk6i/retro-aim-server/wire"
)

// mockOServiceService is an autogenerated mock type for the OServiceService type
type mockOServiceService struct {
	mock.Mock
}

type mockOServiceService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockOServiceService) EXPECT() *mockOServiceService_Expecter {
	return &mockOServiceService_Expecter{mock: &_m.Mock}
}

// ClientOnline provides a mock function with given fields: ctx, service, bodyIn, sess
func (_m *mockOServiceService) ClientOnline(ctx context.Context, service uint16, bodyIn wire.SNAC_0x01_0x02_OServiceClientOnline, sess *state.Session) error {
	ret := _m.Called(ctx, service, bodyIn, sess)

	if len(ret) == 0 {
		panic("no return value specified for ClientOnline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint16, wire.SNAC_0x01_0x02_OServiceClientOnline, *state.Session) error); ok {
		r0 = rf(ctx, service, bodyIn, sess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockOServiceService_ClientOnline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientOnline'
type mockOServiceService_ClientOnline_Call struct {
	*mock.Call
}

// ClientOnline is a helper method to define mock.On call
//   - ctx context.Context
//   - service uint16
//   - bodyIn wire.SNAC_0x01_0x02_OServiceClientOnline
//   - sess *state.Session
func (_e *mockOServiceService_Expecter) ClientOnline(ctx interface{}, service interface{}, bodyIn interface{}, sess interface{}) *mockOServiceService_ClientOnline_Call {
	return &mockOServiceService_ClientOnline_Call{Call: _e.mock.On("ClientOnline", ctx, service, bodyIn, sess)}
}

func (_c *mockOServiceService_ClientOnline_Call) Run(run func(ctx context.Context, service uint16, bodyIn wire.SNAC_0x01_0x02_OServiceClientOnline, sess *state.Session)) *mockOServiceService_ClientOnline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint16), args[2].(wire.SNAC_0x01_0x02_OServiceClientOnline), args[3].(*state.Session))
	})
	return _c
}

func (_c *mockOServiceService_ClientOnline_Call) Return(_a0 error) *mockOServiceService_ClientOnline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOServiceService_ClientOnline_Call) RunAndReturn(run func(context.Context, uint16, wire.SNAC_0x01_0x02_OServiceClientOnline, *state.Session) error) *mockOServiceService_ClientOnline_Call {
	_c.Call.Return(run)
	return _c
}

// IdleNotification provides a mock function with given fields: ctx, sess, bodyIn
func (_m *mockOServiceService) IdleNotification(ctx context.Context, sess *state.Session, bodyIn wire.SNAC_0x01_0x11_OServiceIdleNotification) error {
	ret := _m.Called(ctx, sess, bodyIn)

	if len(ret) == 0 {
		panic("no return value specified for IdleNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *state.Session, wire.SNAC_0x01_0x11_OServiceIdleNotification) error); ok {
		r0 = rf(ctx, sess, bodyIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockOServiceService_IdleNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdleNotification'
type mockOServiceService_IdleNotification_Call struct {
	*mock.Call
}

// IdleNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - sess *state.Session
//   - bodyIn wire.SNAC_0x01_0x11_OServiceIdleNotification
func (_e *mockOServiceService_Expecter) IdleNotification(ctx interface{}, sess interface{}, bodyIn interface{}) *mockOServiceService_IdleNotification_Call {
	return &mockOServiceService_IdleNotification_Call{Call: _e.mock.On("IdleNotification", ctx, sess, bodyIn)}
}

func (_c *mockOServiceService_IdleNotification_Call) Run(run func(ctx context.Context, sess *state.Session, bodyIn wire.SNAC_0x01_0x11_OServiceIdleNotification)) *mockOServiceService_IdleNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*state.Session), args[2].(wire.SNAC_0x01_0x11_OServiceIdleNotification))
	})
	return _c
}

func (_c *mockOServiceService_IdleNotification_Call) Return(_a0 error) *mockOServiceService_IdleNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOServiceService_IdleNotification_Call) RunAndReturn(run func(context.Context, *state.Session, wire.SNAC_0x01_0x11_OServiceIdleNotification) error) *mockOServiceService_IdleNotification_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceRequest provides a mock function with given fields: ctx, service, sess, frame, bodyIn, listener
func (_m *mockOServiceService) ServiceRequest(ctx context.Context, service uint16, sess *state.Session, frame wire.SNACFrame, bodyIn wire.SNAC_0x01_0x04_OServiceServiceRequest, listener config.Listener) (wire.SNACMessage, error) {
	ret := _m.Called(ctx, service, sess, frame, bodyIn, listener)

	if len(ret) == 0 {
		panic("no return value specified for ServiceRequest")
	}

	var r0 wire.SNACMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint16, *state.Session, wire.SNACFrame, wire.SNAC_0x01_0x04_OServiceServiceRequest, config.Listener) (wire.SNACMessage, error)); ok {
		return rf(ctx, service, sess, frame, bodyIn, listener)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint16, *state.Session, wire.SNACFrame, wire.SNAC_0x01_0x04_OServiceServiceRequest, config.Listener) wire.SNACMessage); ok {
		r0 = rf(ctx, service, sess, frame, bodyIn, listener)
	} else {
		r0 = ret.Get(0).(wire.SNACMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint16, *state.Session, wire.SNACFrame, wire.SNAC_0x01_0x04_OServiceServiceRequest, config.Listener) error); ok {
		r1 = rf(ctx, service, sess, frame, bodyIn, listener)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOServiceService_ServiceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceRequest'
type mockOServiceService_ServiceRequest_Call struct {
	*mock.Call
}

// ServiceRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - service uint16
//   - sess *state.Session
//   - frame wire.SNACFrame
//   - bodyIn wire.SNAC_0x01_0x04_OServiceServiceRequest
//   - listener config.Listener
func (_e *mockOServiceService_Expecter) ServiceRequest(ctx interface{}, service interface{}, sess interface{}, frame interface{}, bodyIn interface{}, listener interface{}) *mockOServiceService_ServiceRequest_Call {
	return &mockOServiceService_ServiceRequest_Call{Call: _e.mock.On("ServiceRequest", ctx, service, sess, frame, bodyIn, listener)}
}

func (_c *mockOServiceService_ServiceRequest_Call) Run(run func(ctx context.Context, service uint16, sess *state.Session, frame wire.SNACFrame, bodyIn wire.SNAC_0x01_0x04_OServiceServiceRequest, listener config.Listener)) *mockOServiceService_ServiceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint16), args[2].(*state.Session), args[3].(wire.SNACFrame), args[4].(wire.SNAC_0x01_0x04_OServiceServiceRequest), args[5].(config.Listener))
	})
	return _c
}

func (_c *mockOServiceService_ServiceRequest_Call) Return(_a0 wire.SNACMessage, _a1 error) *mockOServiceService_ServiceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOServiceService_ServiceRequest_Call) RunAndReturn(run func(context.Context, uint16, *state.Session, wire.SNACFrame, wire.SNAC_0x01_0x04_OServiceServiceRequest, config.Listener) (wire.SNACMessage, error)) *mockOServiceService_ServiceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// newMockOServiceService creates a new instance of mockOServiceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOServiceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOServiceService {
	mock := &mockOServiceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
