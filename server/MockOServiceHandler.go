// Code generated by mockery v2.35.2. DO NOT EDIT.

package server

import (
	oscar "github.com/mkaminski/goaim/oscar"
	mock "github.com/stretchr/testify/mock"
)

// MockOServiceHandler is an autogenerated mock type for the OServiceHandler type
type MockOServiceHandler struct {
	mock.Mock
}

type MockOServiceHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOServiceHandler) EXPECT() *MockOServiceHandler_Expecter {
	return &MockOServiceHandler_Expecter{mock: &_m.Mock}
}

// ClientOnlineHandler provides a mock function with given fields: snacPayloadIn, onReadyCB, sess, sm
func (_m *MockOServiceHandler) ClientOnlineHandler(snacPayloadIn oscar.SNAC_0x01_0x02_OServiceClientOnline, onReadyCB OnReadyCB, sess *Session, sm SessionManager) ([]XMessage, error) {
	ret := _m.Called(snacPayloadIn, onReadyCB, sess, sm)

	var r0 []XMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(oscar.SNAC_0x01_0x02_OServiceClientOnline, OnReadyCB, *Session, SessionManager) ([]XMessage, error)); ok {
		return rf(snacPayloadIn, onReadyCB, sess, sm)
	}
	if rf, ok := ret.Get(0).(func(oscar.SNAC_0x01_0x02_OServiceClientOnline, OnReadyCB, *Session, SessionManager) []XMessage); ok {
		r0 = rf(snacPayloadIn, onReadyCB, sess, sm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]XMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(oscar.SNAC_0x01_0x02_OServiceClientOnline, OnReadyCB, *Session, SessionManager) error); ok {
		r1 = rf(snacPayloadIn, onReadyCB, sess, sm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOServiceHandler_ClientOnlineHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientOnlineHandler'
type MockOServiceHandler_ClientOnlineHandler_Call struct {
	*mock.Call
}

// ClientOnlineHandler is a helper method to define mock.On call
//   - snacPayloadIn oscar.SNAC_0x01_0x02_OServiceClientOnline
//   - onReadyCB OnReadyCB
//   - sess *Session
//   - sm SessionManager
func (_e *MockOServiceHandler_Expecter) ClientOnlineHandler(snacPayloadIn interface{}, onReadyCB interface{}, sess interface{}, sm interface{}) *MockOServiceHandler_ClientOnlineHandler_Call {
	return &MockOServiceHandler_ClientOnlineHandler_Call{Call: _e.mock.On("ClientOnlineHandler", snacPayloadIn, onReadyCB, sess, sm)}
}

func (_c *MockOServiceHandler_ClientOnlineHandler_Call) Run(run func(snacPayloadIn oscar.SNAC_0x01_0x02_OServiceClientOnline, onReadyCB OnReadyCB, sess *Session, sm SessionManager)) *MockOServiceHandler_ClientOnlineHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(oscar.SNAC_0x01_0x02_OServiceClientOnline), args[1].(OnReadyCB), args[2].(*Session), args[3].(SessionManager))
	})
	return _c
}

func (_c *MockOServiceHandler_ClientOnlineHandler_Call) Return(_a0 []XMessage, _a1 error) *MockOServiceHandler_ClientOnlineHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOServiceHandler_ClientOnlineHandler_Call) RunAndReturn(run func(oscar.SNAC_0x01_0x02_OServiceClientOnline, OnReadyCB, *Session, SessionManager) ([]XMessage, error)) *MockOServiceHandler_ClientOnlineHandler_Call {
	_c.Call.Return(run)
	return _c
}

// ClientVersionsHandler provides a mock function with given fields: snacPayloadIn
func (_m *MockOServiceHandler) ClientVersionsHandler(snacPayloadIn oscar.SNAC_0x01_0x17_OServiceClientVersions) XMessage {
	ret := _m.Called(snacPayloadIn)

	var r0 XMessage
	if rf, ok := ret.Get(0).(func(oscar.SNAC_0x01_0x17_OServiceClientVersions) XMessage); ok {
		r0 = rf(snacPayloadIn)
	} else {
		r0 = ret.Get(0).(XMessage)
	}

	return r0
}

// MockOServiceHandler_ClientVersionsHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientVersionsHandler'
type MockOServiceHandler_ClientVersionsHandler_Call struct {
	*mock.Call
}

// ClientVersionsHandler is a helper method to define mock.On call
//   - snacPayloadIn oscar.SNAC_0x01_0x17_OServiceClientVersions
func (_e *MockOServiceHandler_Expecter) ClientVersionsHandler(snacPayloadIn interface{}) *MockOServiceHandler_ClientVersionsHandler_Call {
	return &MockOServiceHandler_ClientVersionsHandler_Call{Call: _e.mock.On("ClientVersionsHandler", snacPayloadIn)}
}

func (_c *MockOServiceHandler_ClientVersionsHandler_Call) Run(run func(snacPayloadIn oscar.SNAC_0x01_0x17_OServiceClientVersions)) *MockOServiceHandler_ClientVersionsHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(oscar.SNAC_0x01_0x17_OServiceClientVersions))
	})
	return _c
}

func (_c *MockOServiceHandler_ClientVersionsHandler_Call) Return(_a0 XMessage) *MockOServiceHandler_ClientVersionsHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOServiceHandler_ClientVersionsHandler_Call) RunAndReturn(run func(oscar.SNAC_0x01_0x17_OServiceClientVersions) XMessage) *MockOServiceHandler_ClientVersionsHandler_Call {
	_c.Call.Return(run)
	return _c
}

// IdleNotificationHandler provides a mock function with given fields: sess, sm, fm, snacPayloadIn
func (_m *MockOServiceHandler) IdleNotificationHandler(sess *Session, sm SessionManager, fm *FeedbagStore, snacPayloadIn oscar.SNAC_0x01_0x11_OServiceIdleNotification) error {
	ret := _m.Called(sess, sm, fm, snacPayloadIn)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Session, SessionManager, *FeedbagStore, oscar.SNAC_0x01_0x11_OServiceIdleNotification) error); ok {
		r0 = rf(sess, sm, fm, snacPayloadIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOServiceHandler_IdleNotificationHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdleNotificationHandler'
type MockOServiceHandler_IdleNotificationHandler_Call struct {
	*mock.Call
}

// IdleNotificationHandler is a helper method to define mock.On call
//   - sess *Session
//   - sm SessionManager
//   - fm *FeedbagStore
//   - snacPayloadIn oscar.SNAC_0x01_0x11_OServiceIdleNotification
func (_e *MockOServiceHandler_Expecter) IdleNotificationHandler(sess interface{}, sm interface{}, fm interface{}, snacPayloadIn interface{}) *MockOServiceHandler_IdleNotificationHandler_Call {
	return &MockOServiceHandler_IdleNotificationHandler_Call{Call: _e.mock.On("IdleNotificationHandler", sess, sm, fm, snacPayloadIn)}
}

func (_c *MockOServiceHandler_IdleNotificationHandler_Call) Run(run func(sess *Session, sm SessionManager, fm *FeedbagStore, snacPayloadIn oscar.SNAC_0x01_0x11_OServiceIdleNotification)) *MockOServiceHandler_IdleNotificationHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session), args[1].(SessionManager), args[2].(*FeedbagStore), args[3].(oscar.SNAC_0x01_0x11_OServiceIdleNotification))
	})
	return _c
}

func (_c *MockOServiceHandler_IdleNotificationHandler_Call) Return(_a0 error) *MockOServiceHandler_IdleNotificationHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOServiceHandler_IdleNotificationHandler_Call) RunAndReturn(run func(*Session, SessionManager, *FeedbagStore, oscar.SNAC_0x01_0x11_OServiceIdleNotification) error) *MockOServiceHandler_IdleNotificationHandler_Call {
	_c.Call.Return(run)
	return _c
}

// RateParamsQueryHandler provides a mock function with given fields:
func (_m *MockOServiceHandler) RateParamsQueryHandler() XMessage {
	ret := _m.Called()

	var r0 XMessage
	if rf, ok := ret.Get(0).(func() XMessage); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(XMessage)
	}

	return r0
}

// MockOServiceHandler_RateParamsQueryHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RateParamsQueryHandler'
type MockOServiceHandler_RateParamsQueryHandler_Call struct {
	*mock.Call
}

// RateParamsQueryHandler is a helper method to define mock.On call
func (_e *MockOServiceHandler_Expecter) RateParamsQueryHandler() *MockOServiceHandler_RateParamsQueryHandler_Call {
	return &MockOServiceHandler_RateParamsQueryHandler_Call{Call: _e.mock.On("RateParamsQueryHandler")}
}

func (_c *MockOServiceHandler_RateParamsQueryHandler_Call) Run(run func()) *MockOServiceHandler_RateParamsQueryHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOServiceHandler_RateParamsQueryHandler_Call) Return(_a0 XMessage) *MockOServiceHandler_RateParamsQueryHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOServiceHandler_RateParamsQueryHandler_Call) RunAndReturn(run func() XMessage) *MockOServiceHandler_RateParamsQueryHandler_Call {
	_c.Call.Return(run)
	return _c
}

// RateParamsSubAddHandler provides a mock function with given fields: _a0
func (_m *MockOServiceHandler) RateParamsSubAddHandler(_a0 oscar.SNAC_0x01_0x08_OServiceRateParamsSubAdd) {
	_m.Called(_a0)
}

// MockOServiceHandler_RateParamsSubAddHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RateParamsSubAddHandler'
type MockOServiceHandler_RateParamsSubAddHandler_Call struct {
	*mock.Call
}

// RateParamsSubAddHandler is a helper method to define mock.On call
//   - _a0 oscar.SNAC_0x01_0x08_OServiceRateParamsSubAdd
func (_e *MockOServiceHandler_Expecter) RateParamsSubAddHandler(_a0 interface{}) *MockOServiceHandler_RateParamsSubAddHandler_Call {
	return &MockOServiceHandler_RateParamsSubAddHandler_Call{Call: _e.mock.On("RateParamsSubAddHandler", _a0)}
}

func (_c *MockOServiceHandler_RateParamsSubAddHandler_Call) Run(run func(_a0 oscar.SNAC_0x01_0x08_OServiceRateParamsSubAdd)) *MockOServiceHandler_RateParamsSubAddHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(oscar.SNAC_0x01_0x08_OServiceRateParamsSubAdd))
	})
	return _c
}

func (_c *MockOServiceHandler_RateParamsSubAddHandler_Call) Return() *MockOServiceHandler_RateParamsSubAddHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOServiceHandler_RateParamsSubAddHandler_Call) RunAndReturn(run func(oscar.SNAC_0x01_0x08_OServiceRateParamsSubAdd)) *MockOServiceHandler_RateParamsSubAddHandler_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceRequestHandler provides a mock function with given fields: cfg, cr, sess, snacPayloadIn
func (_m *MockOServiceHandler) ServiceRequestHandler(cfg Config, cr *ChatRegistry, sess *Session, snacPayloadIn oscar.SNAC_0x01_0x04_OServiceServiceRequest) (XMessage, error) {
	ret := _m.Called(cfg, cr, sess, snacPayloadIn)

	var r0 XMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(Config, *ChatRegistry, *Session, oscar.SNAC_0x01_0x04_OServiceServiceRequest) (XMessage, error)); ok {
		return rf(cfg, cr, sess, snacPayloadIn)
	}
	if rf, ok := ret.Get(0).(func(Config, *ChatRegistry, *Session, oscar.SNAC_0x01_0x04_OServiceServiceRequest) XMessage); ok {
		r0 = rf(cfg, cr, sess, snacPayloadIn)
	} else {
		r0 = ret.Get(0).(XMessage)
	}

	if rf, ok := ret.Get(1).(func(Config, *ChatRegistry, *Session, oscar.SNAC_0x01_0x04_OServiceServiceRequest) error); ok {
		r1 = rf(cfg, cr, sess, snacPayloadIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOServiceHandler_ServiceRequestHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceRequestHandler'
type MockOServiceHandler_ServiceRequestHandler_Call struct {
	*mock.Call
}

// ServiceRequestHandler is a helper method to define mock.On call
//   - cfg Config
//   - cr *ChatRegistry
//   - sess *Session
//   - snacPayloadIn oscar.SNAC_0x01_0x04_OServiceServiceRequest
func (_e *MockOServiceHandler_Expecter) ServiceRequestHandler(cfg interface{}, cr interface{}, sess interface{}, snacPayloadIn interface{}) *MockOServiceHandler_ServiceRequestHandler_Call {
	return &MockOServiceHandler_ServiceRequestHandler_Call{Call: _e.mock.On("ServiceRequestHandler", cfg, cr, sess, snacPayloadIn)}
}

func (_c *MockOServiceHandler_ServiceRequestHandler_Call) Run(run func(cfg Config, cr *ChatRegistry, sess *Session, snacPayloadIn oscar.SNAC_0x01_0x04_OServiceServiceRequest)) *MockOServiceHandler_ServiceRequestHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Config), args[1].(*ChatRegistry), args[2].(*Session), args[3].(oscar.SNAC_0x01_0x04_OServiceServiceRequest))
	})
	return _c
}

func (_c *MockOServiceHandler_ServiceRequestHandler_Call) Return(_a0 XMessage, _a1 error) *MockOServiceHandler_ServiceRequestHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOServiceHandler_ServiceRequestHandler_Call) RunAndReturn(run func(Config, *ChatRegistry, *Session, oscar.SNAC_0x01_0x04_OServiceServiceRequest) (XMessage, error)) *MockOServiceHandler_ServiceRequestHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserInfoFieldsHandler provides a mock function with given fields: sess, sm, fm, snacPayloadIn
func (_m *MockOServiceHandler) SetUserInfoFieldsHandler(sess *Session, sm SessionManager, fm *FeedbagStore, snacPayloadIn oscar.SNAC_0x01_0x1E_OServiceSetUserInfoFields) (XMessage, error) {
	ret := _m.Called(sess, sm, fm, snacPayloadIn)

	var r0 XMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(*Session, SessionManager, *FeedbagStore, oscar.SNAC_0x01_0x1E_OServiceSetUserInfoFields) (XMessage, error)); ok {
		return rf(sess, sm, fm, snacPayloadIn)
	}
	if rf, ok := ret.Get(0).(func(*Session, SessionManager, *FeedbagStore, oscar.SNAC_0x01_0x1E_OServiceSetUserInfoFields) XMessage); ok {
		r0 = rf(sess, sm, fm, snacPayloadIn)
	} else {
		r0 = ret.Get(0).(XMessage)
	}

	if rf, ok := ret.Get(1).(func(*Session, SessionManager, *FeedbagStore, oscar.SNAC_0x01_0x1E_OServiceSetUserInfoFields) error); ok {
		r1 = rf(sess, sm, fm, snacPayloadIn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOServiceHandler_SetUserInfoFieldsHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserInfoFieldsHandler'
type MockOServiceHandler_SetUserInfoFieldsHandler_Call struct {
	*mock.Call
}

// SetUserInfoFieldsHandler is a helper method to define mock.On call
//   - sess *Session
//   - sm SessionManager
//   - fm *FeedbagStore
//   - snacPayloadIn oscar.SNAC_0x01_0x1E_OServiceSetUserInfoFields
func (_e *MockOServiceHandler_Expecter) SetUserInfoFieldsHandler(sess interface{}, sm interface{}, fm interface{}, snacPayloadIn interface{}) *MockOServiceHandler_SetUserInfoFieldsHandler_Call {
	return &MockOServiceHandler_SetUserInfoFieldsHandler_Call{Call: _e.mock.On("SetUserInfoFieldsHandler", sess, sm, fm, snacPayloadIn)}
}

func (_c *MockOServiceHandler_SetUserInfoFieldsHandler_Call) Run(run func(sess *Session, sm SessionManager, fm *FeedbagStore, snacPayloadIn oscar.SNAC_0x01_0x1E_OServiceSetUserInfoFields)) *MockOServiceHandler_SetUserInfoFieldsHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session), args[1].(SessionManager), args[2].(*FeedbagStore), args[3].(oscar.SNAC_0x01_0x1E_OServiceSetUserInfoFields))
	})
	return _c
}

func (_c *MockOServiceHandler_SetUserInfoFieldsHandler_Call) Return(_a0 XMessage, _a1 error) *MockOServiceHandler_SetUserInfoFieldsHandler_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOServiceHandler_SetUserInfoFieldsHandler_Call) RunAndReturn(run func(*Session, SessionManager, *FeedbagStore, oscar.SNAC_0x01_0x1E_OServiceSetUserInfoFields) (XMessage, error)) *MockOServiceHandler_SetUserInfoFieldsHandler_Call {
	_c.Call.Return(run)
	return _c
}

// UserInfoQueryHandler provides a mock function with given fields: sess
func (_m *MockOServiceHandler) UserInfoQueryHandler(sess *Session) XMessage {
	ret := _m.Called(sess)

	var r0 XMessage
	if rf, ok := ret.Get(0).(func(*Session) XMessage); ok {
		r0 = rf(sess)
	} else {
		r0 = ret.Get(0).(XMessage)
	}

	return r0
}

// MockOServiceHandler_UserInfoQueryHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserInfoQueryHandler'
type MockOServiceHandler_UserInfoQueryHandler_Call struct {
	*mock.Call
}

// UserInfoQueryHandler is a helper method to define mock.On call
//   - sess *Session
func (_e *MockOServiceHandler_Expecter) UserInfoQueryHandler(sess interface{}) *MockOServiceHandler_UserInfoQueryHandler_Call {
	return &MockOServiceHandler_UserInfoQueryHandler_Call{Call: _e.mock.On("UserInfoQueryHandler", sess)}
}

func (_c *MockOServiceHandler_UserInfoQueryHandler_Call) Run(run func(sess *Session)) *MockOServiceHandler_UserInfoQueryHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Session))
	})
	return _c
}

func (_c *MockOServiceHandler_UserInfoQueryHandler_Call) Return(_a0 XMessage) *MockOServiceHandler_UserInfoQueryHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOServiceHandler_UserInfoQueryHandler_Call) RunAndReturn(run func(*Session) XMessage) *MockOServiceHandler_UserInfoQueryHandler_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOServiceHandler creates a new instance of MockOServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOServiceHandler {
	mock := &MockOServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
