// Code generated by mockery v2.53.3. DO NOT EDIT.

package http

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockWebAPIKeyManager is an autogenerated mock type for the WebAPIKeyManager type
type mockWebAPIKeyManager struct {
	mock.Mock
}

type mockWebAPIKeyManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockWebAPIKeyManager) EXPECT() *mockWebAPIKeyManager_Expecter {
	return &mockWebAPIKeyManager_Expecter{mock: &_m.Mock}
}

// CreateAPIKey provides a mock function with given fields: ctx, key
func (_m *mockWebAPIKeyManager) CreateAPIKey(ctx context.Context, key state.WebAPIKey) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for CreateAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, state.WebAPIKey) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockWebAPIKeyManager_CreateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAPIKey'
type mockWebAPIKeyManager_CreateAPIKey_Call struct {
	*mock.Call
}

// CreateAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - key state.WebAPIKey
func (_e *mockWebAPIKeyManager_Expecter) CreateAPIKey(ctx interface{}, key interface{}) *mockWebAPIKeyManager_CreateAPIKey_Call {
	return &mockWebAPIKeyManager_CreateAPIKey_Call{Call: _e.mock.On("CreateAPIKey", ctx, key)}
}

func (_c *mockWebAPIKeyManager_CreateAPIKey_Call) Run(run func(ctx context.Context, key state.WebAPIKey)) *mockWebAPIKeyManager_CreateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.WebAPIKey))
	})
	return _c
}

func (_c *mockWebAPIKeyManager_CreateAPIKey_Call) Return(_a0 error) *mockWebAPIKeyManager_CreateAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockWebAPIKeyManager_CreateAPIKey_Call) RunAndReturn(run func(context.Context, state.WebAPIKey) error) *mockWebAPIKeyManager_CreateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAPIKey provides a mock function with given fields: ctx, devID
func (_m *mockWebAPIKeyManager) DeleteAPIKey(ctx context.Context, devID string) error {
	ret := _m.Called(ctx, devID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, devID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockWebAPIKeyManager_DeleteAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAPIKey'
type mockWebAPIKeyManager_DeleteAPIKey_Call struct {
	*mock.Call
}

// DeleteAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - devID string
func (_e *mockWebAPIKeyManager_Expecter) DeleteAPIKey(ctx interface{}, devID interface{}) *mockWebAPIKeyManager_DeleteAPIKey_Call {
	return &mockWebAPIKeyManager_DeleteAPIKey_Call{Call: _e.mock.On("DeleteAPIKey", ctx, devID)}
}

func (_c *mockWebAPIKeyManager_DeleteAPIKey_Call) Run(run func(ctx context.Context, devID string)) *mockWebAPIKeyManager_DeleteAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockWebAPIKeyManager_DeleteAPIKey_Call) Return(_a0 error) *mockWebAPIKeyManager_DeleteAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockWebAPIKeyManager_DeleteAPIKey_Call) RunAndReturn(run func(context.Context, string) error) *mockWebAPIKeyManager_DeleteAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAPIKeyByDevID provides a mock function with given fields: ctx, devID
func (_m *mockWebAPIKeyManager) GetAPIKeyByDevID(ctx context.Context, devID string) (*state.WebAPIKey, error) {
	ret := _m.Called(ctx, devID)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIKeyByDevID")
	}

	var r0 *state.WebAPIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*state.WebAPIKey, error)); ok {
		return rf(ctx, devID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *state.WebAPIKey); ok {
		r0 = rf(ctx, devID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*state.WebAPIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, devID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockWebAPIKeyManager_GetAPIKeyByDevID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIKeyByDevID'
type mockWebAPIKeyManager_GetAPIKeyByDevID_Call struct {
	*mock.Call
}

// GetAPIKeyByDevID is a helper method to define mock.On call
//   - ctx context.Context
//   - devID string
func (_e *mockWebAPIKeyManager_Expecter) GetAPIKeyByDevID(ctx interface{}, devID interface{}) *mockWebAPIKeyManager_GetAPIKeyByDevID_Call {
	return &mockWebAPIKeyManager_GetAPIKeyByDevID_Call{Call: _e.mock.On("GetAPIKeyByDevID", ctx, devID)}
}

func (_c *mockWebAPIKeyManager_GetAPIKeyByDevID_Call) Run(run func(ctx context.Context, devID string)) *mockWebAPIKeyManager_GetAPIKeyByDevID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockWebAPIKeyManager_GetAPIKeyByDevID_Call) Return(_a0 *state.WebAPIKey, _a1 error) *mockWebAPIKeyManager_GetAPIKeyByDevID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockWebAPIKeyManager_GetAPIKeyByDevID_Call) RunAndReturn(run func(context.Context, string) (*state.WebAPIKey, error)) *mockWebAPIKeyManager_GetAPIKeyByDevID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAPIKeys provides a mock function with given fields: ctx
func (_m *mockWebAPIKeyManager) ListAPIKeys(ctx context.Context) ([]state.WebAPIKey, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListAPIKeys")
	}

	var r0 []state.WebAPIKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]state.WebAPIKey, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []state.WebAPIKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]state.WebAPIKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockWebAPIKeyManager_ListAPIKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAPIKeys'
type mockWebAPIKeyManager_ListAPIKeys_Call struct {
	*mock.Call
}

// ListAPIKeys is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockWebAPIKeyManager_Expecter) ListAPIKeys(ctx interface{}) *mockWebAPIKeyManager_ListAPIKeys_Call {
	return &mockWebAPIKeyManager_ListAPIKeys_Call{Call: _e.mock.On("ListAPIKeys", ctx)}
}

func (_c *mockWebAPIKeyManager_ListAPIKeys_Call) Run(run func(ctx context.Context)) *mockWebAPIKeyManager_ListAPIKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockWebAPIKeyManager_ListAPIKeys_Call) Return(_a0 []state.WebAPIKey, _a1 error) *mockWebAPIKeyManager_ListAPIKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockWebAPIKeyManager_ListAPIKeys_Call) RunAndReturn(run func(context.Context) ([]state.WebAPIKey, error)) *mockWebAPIKeyManager_ListAPIKeys_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAPIKey provides a mock function with given fields: ctx, devID, updates
func (_m *mockWebAPIKeyManager) UpdateAPIKey(ctx context.Context, devID string, updates state.WebAPIKeyUpdate) error {
	ret := _m.Called(ctx, devID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, state.WebAPIKeyUpdate) error); ok {
		r0 = rf(ctx, devID, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockWebAPIKeyManager_UpdateAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAPIKey'
type mockWebAPIKeyManager_UpdateAPIKey_Call struct {
	*mock.Call
}

// UpdateAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - devID string
//   - updates state.WebAPIKeyUpdate
func (_e *mockWebAPIKeyManager_Expecter) UpdateAPIKey(ctx interface{}, devID interface{}, updates interface{}) *mockWebAPIKeyManager_UpdateAPIKey_Call {
	return &mockWebAPIKeyManager_UpdateAPIKey_Call{Call: _e.mock.On("UpdateAPIKey", ctx, devID, updates)}
}

func (_c *mockWebAPIKeyManager_UpdateAPIKey_Call) Run(run func(ctx context.Context, devID string, updates state.WebAPIKeyUpdate)) *mockWebAPIKeyManager_UpdateAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(state.WebAPIKeyUpdate))
	})
	return _c
}

func (_c *mockWebAPIKeyManager_UpdateAPIKey_Call) Return(_a0 error) *mockWebAPIKeyManager_UpdateAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockWebAPIKeyManager_UpdateAPIKey_Call) RunAndReturn(run func(context.Context, string, state.WebAPIKeyUpdate) error) *mockWebAPIKeyManager_UpdateAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// newMockWebAPIKeyManager creates a new instance of mockWebAPIKeyManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockWebAPIKeyManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockWebAPIKeyManager {
	mock := &mockWebAPIKeyManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
