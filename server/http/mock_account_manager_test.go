// Code generated by mockery v2.53.3. DO NOT EDIT.

package http

import (
	context "context"
	mail "net/mail"

	mock "github.com/stretchr/testify/mock"

	state "github.com/mk6i/retro-aim-server/state"
)

// mockAccountManager is an autogenerated mock type for the AccountManager type
type mockAccountManager struct {
	mock.Mock
}

type mockAccountManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAccountManager) EXPECT() *mockAccountManager_Expecter {
	return &mockAccountManager_Expecter{mock: &_m.Mock}
}

// ConfirmStatus provides a mock function with given fields: ctx, screenName
func (_m *mockAccountManager) ConfirmStatus(ctx context.Context, screenName state.IdentScreenName) (bool, error) {
	ret := _m.Called(ctx, screenName)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmStatus")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName) (bool, error)); ok {
		return rf(ctx, screenName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName) bool); ok {
		r0 = rf(ctx, screenName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, state.IdentScreenName) error); ok {
		r1 = rf(ctx, screenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAccountManager_ConfirmStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmStatus'
type mockAccountManager_ConfirmStatus_Call struct {
	*mock.Call
}

// ConfirmStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - screenName state.IdentScreenName
func (_e *mockAccountManager_Expecter) ConfirmStatus(ctx interface{}, screenName interface{}) *mockAccountManager_ConfirmStatus_Call {
	return &mockAccountManager_ConfirmStatus_Call{Call: _e.mock.On("ConfirmStatus", ctx, screenName)}
}

func (_c *mockAccountManager_ConfirmStatus_Call) Run(run func(ctx context.Context, screenName state.IdentScreenName)) *mockAccountManager_ConfirmStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockAccountManager_ConfirmStatus_Call) Return(_a0 bool, _a1 error) *mockAccountManager_ConfirmStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAccountManager_ConfirmStatus_Call) RunAndReturn(run func(context.Context, state.IdentScreenName) (bool, error)) *mockAccountManager_ConfirmStatus_Call {
	_c.Call.Return(run)
	return _c
}

// EmailAddress provides a mock function with given fields: ctx, screenName
func (_m *mockAccountManager) EmailAddress(ctx context.Context, screenName state.IdentScreenName) (*mail.Address, error) {
	ret := _m.Called(ctx, screenName)

	if len(ret) == 0 {
		panic("no return value specified for EmailAddress")
	}

	var r0 *mail.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName) (*mail.Address, error)); ok {
		return rf(ctx, screenName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName) *mail.Address); ok {
		r0 = rf(ctx, screenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mail.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, state.IdentScreenName) error); ok {
		r1 = rf(ctx, screenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAccountManager_EmailAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmailAddress'
type mockAccountManager_EmailAddress_Call struct {
	*mock.Call
}

// EmailAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - screenName state.IdentScreenName
func (_e *mockAccountManager_Expecter) EmailAddress(ctx interface{}, screenName interface{}) *mockAccountManager_EmailAddress_Call {
	return &mockAccountManager_EmailAddress_Call{Call: _e.mock.On("EmailAddress", ctx, screenName)}
}

func (_c *mockAccountManager_EmailAddress_Call) Run(run func(ctx context.Context, screenName state.IdentScreenName)) *mockAccountManager_EmailAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockAccountManager_EmailAddress_Call) Return(_a0 *mail.Address, _a1 error) *mockAccountManager_EmailAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAccountManager_EmailAddress_Call) RunAndReturn(run func(context.Context, state.IdentScreenName) (*mail.Address, error)) *mockAccountManager_EmailAddress_Call {
	_c.Call.Return(run)
	return _c
}

// RegStatus provides a mock function with given fields: ctx, screenName
func (_m *mockAccountManager) RegStatus(ctx context.Context, screenName state.IdentScreenName) (uint16, error) {
	ret := _m.Called(ctx, screenName)

	if len(ret) == 0 {
		panic("no return value specified for RegStatus")
	}

	var r0 uint16
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName) (uint16, error)); ok {
		return rf(ctx, screenName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, state.IdentScreenName) uint16); ok {
		r0 = rf(ctx, screenName)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	if rf, ok := ret.Get(1).(func(context.Context, state.IdentScreenName) error); ok {
		r1 = rf(ctx, screenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAccountManager_RegStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegStatus'
type mockAccountManager_RegStatus_Call struct {
	*mock.Call
}

// RegStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - screenName state.IdentScreenName
func (_e *mockAccountManager_Expecter) RegStatus(ctx interface{}, screenName interface{}) *mockAccountManager_RegStatus_Call {
	return &mockAccountManager_RegStatus_Call{Call: _e.mock.On("RegStatus", ctx, screenName)}
}

func (_c *mockAccountManager_RegStatus_Call) Run(run func(ctx context.Context, screenName state.IdentScreenName)) *mockAccountManager_RegStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockAccountManager_RegStatus_Call) Return(_a0 uint16, _a1 error) *mockAccountManager_RegStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAccountManager_RegStatus_Call) RunAndReturn(run func(context.Context, state.IdentScreenName) (uint16, error)) *mockAccountManager_RegStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SetBotStatus provides a mock function with given fields: ctx, isBot, screenName
func (_m *mockAccountManager) SetBotStatus(ctx context.Context, isBot bool, screenName state.IdentScreenName) error {
	ret := _m.Called(ctx, isBot, screenName)

	if len(ret) == 0 {
		panic("no return value specified for SetBotStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool, state.IdentScreenName) error); ok {
		r0 = rf(ctx, isBot, screenName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAccountManager_SetBotStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBotStatus'
type mockAccountManager_SetBotStatus_Call struct {
	*mock.Call
}

// SetBotStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - isBot bool
//   - screenName state.IdentScreenName
func (_e *mockAccountManager_Expecter) SetBotStatus(ctx interface{}, isBot interface{}, screenName interface{}) *mockAccountManager_SetBotStatus_Call {
	return &mockAccountManager_SetBotStatus_Call{Call: _e.mock.On("SetBotStatus", ctx, isBot, screenName)}
}

func (_c *mockAccountManager_SetBotStatus_Call) Run(run func(ctx context.Context, isBot bool, screenName state.IdentScreenName)) *mockAccountManager_SetBotStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool), args[2].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockAccountManager_SetBotStatus_Call) Return(_a0 error) *mockAccountManager_SetBotStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAccountManager_SetBotStatus_Call) RunAndReturn(run func(context.Context, bool, state.IdentScreenName) error) *mockAccountManager_SetBotStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSuspendedStatus provides a mock function with given fields: ctx, suspendedStatus, screenName
func (_m *mockAccountManager) UpdateSuspendedStatus(ctx context.Context, suspendedStatus uint16, screenName state.IdentScreenName) error {
	ret := _m.Called(ctx, suspendedStatus, screenName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSuspendedStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint16, state.IdentScreenName) error); ok {
		r0 = rf(ctx, suspendedStatus, screenName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAccountManager_UpdateSuspendedStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSuspendedStatus'
type mockAccountManager_UpdateSuspendedStatus_Call struct {
	*mock.Call
}

// UpdateSuspendedStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - suspendedStatus uint16
//   - screenName state.IdentScreenName
func (_e *mockAccountManager_Expecter) UpdateSuspendedStatus(ctx interface{}, suspendedStatus interface{}, screenName interface{}) *mockAccountManager_UpdateSuspendedStatus_Call {
	return &mockAccountManager_UpdateSuspendedStatus_Call{Call: _e.mock.On("UpdateSuspendedStatus", ctx, suspendedStatus, screenName)}
}

func (_c *mockAccountManager_UpdateSuspendedStatus_Call) Run(run func(ctx context.Context, suspendedStatus uint16, screenName state.IdentScreenName)) *mockAccountManager_UpdateSuspendedStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint16), args[2].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockAccountManager_UpdateSuspendedStatus_Call) Return(_a0 error) *mockAccountManager_UpdateSuspendedStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAccountManager_UpdateSuspendedStatus_Call) RunAndReturn(run func(context.Context, uint16, state.IdentScreenName) error) *mockAccountManager_UpdateSuspendedStatus_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAccountManager creates a new instance of mockAccountManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAccountManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAccountManager {
	mock := &mockAccountManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
