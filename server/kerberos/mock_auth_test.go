// Code generated by mockery v2.53.3. DO NOT EDIT.

package kerberos

import (
	context "context"

	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"

	wire "github.com/mk6i/retro-aim-server/wire"
)

// mockAuthService is an autogenerated mock type for the AuthService type
type mockAuthService struct {
	mock.Mock
}

type mockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAuthService) EXPECT() *mockAuthService_Expecter {
	return &mockAuthService_Expecter{mock: &_m.Mock}
}

// KerberosLogin provides a mock function with given fields: ctx, inBody, newUserFn, advertisedHost
func (_m *mockAuthService) KerberosLogin(ctx context.Context, inBody wire.SNAC_0x050C_0x0002_KerberosLoginRequest, newUserFn func(state.DisplayScreenName) (state.User, error), advertisedHost string) (wire.SNACMessage, error) {
	ret := _m.Called(ctx, inBody, newUserFn, advertisedHost)

	if len(ret) == 0 {
		panic("no return value specified for KerberosLogin")
	}

	var r0 wire.SNACMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, wire.SNAC_0x050C_0x0002_KerberosLoginRequest, func(state.DisplayScreenName) (state.User, error), string) (wire.SNACMessage, error)); ok {
		return rf(ctx, inBody, newUserFn, advertisedHost)
	}
	if rf, ok := ret.Get(0).(func(context.Context, wire.SNAC_0x050C_0x0002_KerberosLoginRequest, func(state.DisplayScreenName) (state.User, error), string) wire.SNACMessage); ok {
		r0 = rf(ctx, inBody, newUserFn, advertisedHost)
	} else {
		r0 = ret.Get(0).(wire.SNACMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, wire.SNAC_0x050C_0x0002_KerberosLoginRequest, func(state.DisplayScreenName) (state.User, error), string) error); ok {
		r1 = rf(ctx, inBody, newUserFn, advertisedHost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAuthService_KerberosLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KerberosLogin'
type mockAuthService_KerberosLogin_Call struct {
	*mock.Call
}

// KerberosLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - inBody wire.SNAC_0x050C_0x0002_KerberosLoginRequest
//   - newUserFn func(state.DisplayScreenName)(state.User , error)
//   - advertisedHost string
func (_e *mockAuthService_Expecter) KerberosLogin(ctx interface{}, inBody interface{}, newUserFn interface{}, advertisedHost interface{}) *mockAuthService_KerberosLogin_Call {
	return &mockAuthService_KerberosLogin_Call{Call: _e.mock.On("KerberosLogin", ctx, inBody, newUserFn, advertisedHost)}
}

func (_c *mockAuthService_KerberosLogin_Call) Run(run func(ctx context.Context, inBody wire.SNAC_0x050C_0x0002_KerberosLoginRequest, newUserFn func(state.DisplayScreenName) (state.User, error), advertisedHost string)) *mockAuthService_KerberosLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(wire.SNAC_0x050C_0x0002_KerberosLoginRequest), args[2].(func(state.DisplayScreenName) (state.User, error)), args[3].(string))
	})
	return _c
}

func (_c *mockAuthService_KerberosLogin_Call) Return(_a0 wire.SNACMessage, _a1 error) *mockAuthService_KerberosLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAuthService_KerberosLogin_Call) RunAndReturn(run func(context.Context, wire.SNAC_0x050C_0x0002_KerberosLoginRequest, func(state.DisplayScreenName) (state.User, error), string) (wire.SNACMessage, error)) *mockAuthService_KerberosLogin_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAuthService creates a new instance of mockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAuthService {
	mock := &mockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
