// Code generated by mockery v2.53.3. DO NOT EDIT.

package oscar

import (
	context "context"

	wire "github.com/mk6i/retro-aim-server/wire"
	mock "github.com/stretchr/testify/mock"
)

// mockStatsService is an autogenerated mock type for the StatsService type
type mockStatsService struct {
	mock.Mock
}

type mockStatsService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStatsService) EXPECT() *mockStatsService_Expecter {
	return &mockStatsService_Expecter{mock: &_m.Mock}
}

// ReportEvents provides a mock function with given fields: ctx, inFrame, inBody
func (_m *mockStatsService) ReportEvents(ctx context.Context, inFrame wire.SNACFrame, inBody wire.SNAC_0x0B_0x03_StatsReportEvents) wire.SNACMessage {
	ret := _m.Called(ctx, inFrame, inBody)

	if len(ret) == 0 {
		panic("no return value specified for ReportEvents")
	}

	var r0 wire.SNACMessage
	if rf, ok := ret.Get(0).(func(context.Context, wire.SNACFrame, wire.SNAC_0x0B_0x03_StatsReportEvents) wire.SNACMessage); ok {
		r0 = rf(ctx, inFrame, inBody)
	} else {
		r0 = ret.Get(0).(wire.SNACMessage)
	}

	return r0
}

// mockStatsService_ReportEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportEvents'
type mockStatsService_ReportEvents_Call struct {
	*mock.Call
}

// ReportEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - inFrame wire.SNACFrame
//   - inBody wire.SNAC_0x0B_0x03_StatsReportEvents
func (_e *mockStatsService_Expecter) ReportEvents(ctx interface{}, inFrame interface{}, inBody interface{}) *mockStatsService_ReportEvents_Call {
	return &mockStatsService_ReportEvents_Call{Call: _e.mock.On("ReportEvents", ctx, inFrame, inBody)}
}

func (_c *mockStatsService_ReportEvents_Call) Run(run func(ctx context.Context, inFrame wire.SNACFrame, inBody wire.SNAC_0x0B_0x03_StatsReportEvents)) *mockStatsService_ReportEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(wire.SNACFrame), args[2].(wire.SNAC_0x0B_0x03_StatsReportEvents))
	})
	return _c
}

func (_c *mockStatsService_ReportEvents_Call) Return(_a0 wire.SNACMessage) *mockStatsService_ReportEvents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockStatsService_ReportEvents_Call) RunAndReturn(run func(context.Context, wire.SNACFrame, wire.SNAC_0x0B_0x03_StatsReportEvents) wire.SNACMessage) *mockStatsService_ReportEvents_Call {
	_c.Call.Return(run)
	return _c
}

// newMockStatsService creates a new instance of mockStatsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStatsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStatsService {
	mock := &mockStatsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
