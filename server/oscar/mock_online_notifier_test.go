// Code generated by mockery v2.53.3. DO NOT EDIT.

package oscar

import (
	wire "github.com/mk6i/retro-aim-server/wire"
	mock "github.com/stretchr/testify/mock"
)

// mockOnlineNotifier is an autogenerated mock type for the OnlineNotifier type
type mockOnlineNotifier struct {
	mock.Mock
}

type mockOnlineNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *mockOnlineNotifier) EXPECT() *mockOnlineNotifier_Expecter {
	return &mockOnlineNotifier_Expecter{mock: &_m.Mock}
}

// HostOnline provides a mock function with given fields: service
func (_m *mockOnlineNotifier) HostOnline(service uint16) wire.SNACMessage {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for HostOnline")
	}

	var r0 wire.SNACMessage
	if rf, ok := ret.Get(0).(func(uint16) wire.SNACMessage); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Get(0).(wire.SNACMessage)
	}

	return r0
}

// mockOnlineNotifier_HostOnline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HostOnline'
type mockOnlineNotifier_HostOnline_Call struct {
	*mock.Call
}

// HostOnline is a helper method to define mock.On call
//   - service uint16
func (_e *mockOnlineNotifier_Expecter) HostOnline(service interface{}) *mockOnlineNotifier_HostOnline_Call {
	return &mockOnlineNotifier_HostOnline_Call{Call: _e.mock.On("HostOnline", service)}
}

func (_c *mockOnlineNotifier_HostOnline_Call) Run(run func(service uint16)) *mockOnlineNotifier_HostOnline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint16))
	})
	return _c
}

func (_c *mockOnlineNotifier_HostOnline_Call) Return(_a0 wire.SNACMessage) *mockOnlineNotifier_HostOnline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOnlineNotifier_HostOnline_Call) RunAndReturn(run func(uint16) wire.SNACMessage) *mockOnlineNotifier_HostOnline_Call {
	_c.Call.Return(run)
	return _c
}

// newMockOnlineNotifier creates a new instance of mockOnlineNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOnlineNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOnlineNotifier {
	mock := &mockOnlineNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
