// Code generated by mockery v2.53.3. DO NOT EDIT.

package oscar

import (
	state "github.com/mk6i/retro-aim-server/state"
	mock "github.com/stretchr/testify/mock"
)

// mockChatSessionManager is an autogenerated mock type for the ChatSessionManager type
type mockChatSessionManager struct {
	mock.Mock
}

type mockChatSessionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockChatSessionManager) EXPECT() *mockChatSessionManager_Expecter {
	return &mockChatSessionManager_Expecter{mock: &_m.Mock}
}

// RemoveUserFromAllChats provides a mock function with given fields: user
func (_m *mockChatSessionManager) RemoveUserFromAllChats(user state.IdentScreenName) {
	_m.Called(user)
}

// mockChatSessionManager_RemoveUserFromAllChats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromAllChats'
type mockChatSessionManager_RemoveUserFromAllChats_Call struct {
	*mock.Call
}

// RemoveUserFromAllChats is a helper method to define mock.On call
//   - user state.IdentScreenName
func (_e *mockChatSessionManager_Expecter) RemoveUserFromAllChats(user interface{}) *mockChatSessionManager_RemoveUserFromAllChats_Call {
	return &mockChatSessionManager_RemoveUserFromAllChats_Call{Call: _e.mock.On("RemoveUserFromAllChats", user)}
}

func (_c *mockChatSessionManager_RemoveUserFromAllChats_Call) Run(run func(user state.IdentScreenName)) *mockChatSessionManager_RemoveUserFromAllChats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(state.IdentScreenName))
	})
	return _c
}

func (_c *mockChatSessionManager_RemoveUserFromAllChats_Call) Return() *mockChatSessionManager_RemoveUserFromAllChats_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockChatSessionManager_RemoveUserFromAllChats_Call) RunAndReturn(run func(state.IdentScreenName)) *mockChatSessionManager_RemoveUserFromAllChats_Call {
	_c.Run(run)
	return _c
}

// newMockChatSessionManager creates a new instance of mockChatSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockChatSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockChatSessionManager {
	mock := &mockChatSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
