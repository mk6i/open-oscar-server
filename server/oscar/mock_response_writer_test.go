// Code generated by mockery v2.53.3. DO NOT EDIT.

package oscar

import (
	wire "github.com/mk6i/retro-aim-server/wire"
	mock "github.com/stretchr/testify/mock"
)

// mockResponseWriter is an autogenerated mock type for the ResponseWriter type
type mockResponseWriter struct {
	mock.Mock
}

type mockResponseWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockResponseWriter) EXPECT() *mockResponseWriter_Expecter {
	return &mockResponseWriter_Expecter{mock: &_m.Mock}
}

// SendSNAC provides a mock function with given fields: frame, body
func (_m *mockResponseWriter) SendSNAC(frame wire.SNACFrame, body interface{}) error {
	ret := _m.Called(frame, body)

	if len(ret) == 0 {
		panic("no return value specified for SendSNAC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(wire.SNACFrame, interface{}) error); ok {
		r0 = rf(frame, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockResponseWriter_SendSNAC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSNAC'
type mockResponseWriter_SendSNAC_Call struct {
	*mock.Call
}

// SendSNAC is a helper method to define mock.On call
//   - frame wire.SNACFrame
//   - body interface{}
func (_e *mockResponseWriter_Expecter) SendSNAC(frame interface{}, body interface{}) *mockResponseWriter_SendSNAC_Call {
	return &mockResponseWriter_SendSNAC_Call{Call: _e.mock.On("SendSNAC", frame, body)}
}

func (_c *mockResponseWriter_SendSNAC_Call) Run(run func(frame wire.SNACFrame, body interface{})) *mockResponseWriter_SendSNAC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(wire.SNACFrame), args[1].(interface{}))
	})
	return _c
}

func (_c *mockResponseWriter_SendSNAC_Call) Return(_a0 error) *mockResponseWriter_SendSNAC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockResponseWriter_SendSNAC_Call) RunAndReturn(run func(wire.SNACFrame, interface{}) error) *mockResponseWriter_SendSNAC_Call {
	_c.Call.Return(run)
	return _c
}

// newMockResponseWriter creates a new instance of mockResponseWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockResponseWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockResponseWriter {
	mock := &mockResponseWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
